scchart pacemaker {
  input bool as, vs;
  output bool ap, vp;
  
  input int to_lri, to_uri, to_avi, to_pvarp, to_vrp, to_aei;
  
  output bool LRI, URI, AVI, PVARP, VRP, AEI;
  output bool LRI_p, URI_p, AVI_p, PVARP_p, VRP_p, AEI_p;
  
  int t_lri, t_uri, t_avi, t_pvarp, t_vrp, t_aei;


  region pulse_a:

  initial state off {
    entry / ap = false
  }
  --> on_sense with (as & !PVARP)
  --> on_pulse with AEI_p;

  state on_sense {
    entry / ap = true
  }
  --> off with true;
  
  state on_pulse {
    entry / ap = true
  }
  --> off with true;


  region pulse_v:

  initial state off {
    entry / vp = false
  }
  --> on_sense with vs & !VRP
  --> on_pulse with URI_p;

  state on_sense {
    entry / vp = true
  }
  --> off with true;
  
  state on_pulse {
    entry / vp = true
  }
  --> off with true;


  region avi:
  int time;

  initial state off {
    entry / AVI = false;
    entry / AVI_p = false;
    entry / t_avi = 0
  }
  --> on with ap;

  state on {
    entry / AVI = true
  }
  --> off with vp
  --> on with time < to_avi / t_avi ++
  --> p_off with t_avi == to_avi;

  state p_off {
    entry / AVI = false;
    entry / AVI_p = true
  }
  --> off with true;


  region pvarp:
  int time;

  initial state off {
    entry / PVARP = false;
    entry / PVARP_p = false;
    entry / t_pvarp = 0
  }
  --> on with vp;

  state on {
    entry / PVARP = true
  }
  --> on with time < to_pvarp / t_pvarp ++
  --> p_off with t_pvarp == to_pvarp;

  state p_off {
    entry / PVARP = false;
    entry / PVARP_p = true
  }
  --> off with true;

/*
  region vrp:
  int time;

  initial state off {
    entry / VRP = false;
    entry / VRP_p = false;
    entry / t_vrp = 0;
  }
  --> on with vp;

  state on {
    entry / VRP = true
  }
  --> on with time < to_vrp / t_vrp ++
  --> p_off with t_vrp == to_vrp;

  state p_off {
    entry / VRP_p = true
  }
  --> off with true;
  

  region aei:
  int time;

  initial state off {
    entry / AEI = false;
    entry / AEI_p = false;
    entry / t_aei = 0;
  }
  --> on with vp;

  state on {
    entry / AEI = true
  }
  --> off with ap
  --> on with t_aei < to_aei / t_aei ++
  --> p_off with t_aei == to_aei;

  state p_off {
    entry / AEI_p = true
  }
  --> off with true;


  region lri:
  int time;

  initial state off {
    entry / LRI = false;
    entry / LRI_p = false;
    entry / t_lri = 0;
  }
  --> on with vp;

  state on {
    entry / LRI = true
  }
  --> on with t_lri < to_lri / t_lri ++
  --> p_off with t_lri == to_lri;

  state p_off {
    entry / LRI_p = true
  }
  --> off with true;


  region uri:
  int time;

  initial state off {
    entry / URI = false;
    entry / URI_p = false;
    entry / t_uri = 0;
  }
  --> on with vp;

  state on {
    entry / URI = true
  }
  --> on with t_uri < to_uri / time ++
  --> p_off with t_uri == to_uri;

  state p_off {
    entry / URI_p = true
  }
  --> off with true; */
}